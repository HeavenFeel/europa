{"version":3,"file":"europa-plugin-standard-anchor.min.js.map","sources":["../src/index.js"],"sourcesContent":["/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst contextKey = 'europaPluginStandardAnchor';\n\nmodule.exports = function() {\n  return {\n    converter: {\n      A: {\n        startTag(conversion, context) {\n          const { element, options } = conversion;\n          const href = options.absolute ? element.href : element.getAttribute('href');\n          if (!href) {\n            return true;\n          }\n\n          const { anchorMap, anchors } = conversion.context[contextKey];\n          const title = element.getAttribute('title');\n          const value = title ? `${href} \"${title}\"` : href;\n          let index;\n\n          if (options.inline) {\n            context.value = `(${value})`;\n          } else {\n            index = anchorMap[value];\n            if (index == null) {\n              index = anchors.push(value) - 1;\n\n              anchorMap[value] = index;\n            }\n\n            context.value = `[anchor${index}]`;\n          }\n\n          conversion.output('[');\n\n          conversion.atNoWhiteSpace = true;\n\n          return true;\n        },\n\n        endTag(conversion, context) {\n          if (context.value != null) {\n            conversion.output(`]${context.value}`);\n          }\n        }\n      }\n    },\n\n    startConversion(conversion) {\n      conversion.context[contextKey] = {\n        anchorMap: {},\n        anchors: []\n      };\n    },\n\n    endConversion(conversion) {\n      const { anchors } = conversion.context[contextKey];\n      if (!anchors.length) {\n        return;\n      }\n\n      conversion.append('\\n\\n');\n\n      for (let i = 0; i < anchors.length; i++) {\n        conversion.append(`[anchor${i}]: ${anchors[i]}\\n`);\n      }\n    }\n  };\n};\n"],"names":["contextKey","conversion","context","element","options","href","absolute","getAttribute","anchorMap","anchors","title","value","index","inline","push","output","atNoWhiteSpace","length","append","i"],"mappings":";sMAwBA,IAAMA,EAAa,oCAEF,kDAIAC,EAAYC,OACXC,EAAqBF,EAArBE,QAASC,EAAYH,EAAZG,QACXC,EAAOD,EAAQE,SAAWH,EAAQE,KAAOF,EAAQI,aAAa,YAC/DF,SACI,QAGsBJ,EAAWC,QAAQF,GAA1CQ,IAAAA,UAAWC,IAAAA,QACbC,EAAQP,EAAQI,aAAa,SAC7BI,EAAQD,EAAWL,OAASK,MAAWL,EACzCO,gBAEAR,EAAQS,SACFF,UAAYA,OAGP,SADLH,EAAUG,QAERF,EAAQK,KAAKH,GAAS,IAEpBA,GAASC,KAGbD,gBAAkBC,SAGjBG,OAAO,OAEPC,gBAAiB,GAErB,mBAGFf,EAAYC,GACI,MAAjBA,EAAQS,SACCI,WAAWb,EAAQS,mCAMtBV,KACHC,QAAQF,qDAMPC,OACJQ,EAAYR,EAAWC,QAAQF,GAA/BS,WACHA,EAAQQ,UAIFC,OAAO,YAEb,IAAIC,EAAI,EAAGA,EAAIV,EAAQQ,OAAQE,MACvBD,iBAAiBC,QAAOV,EAAQU"}