{"version":3,"file":"europa.min.js","sources":["../../europa-plugin-standard-anchor/src/index.js","../../europa-plugin-standard-code/src/index.js","../../europa-plugin-standard-frame/src/index.js","../../europa-plugin-standard-heading/src/index.js","../../europa-plugin-standard-image/src/index.js","../../europa-plugin-standard-list/src/index.js","../../europa-plugin-standard-paragraph/src/index.js","../../europa-plugin-standard-block-quote/src/index.js","../../europa-plugin-standard-bold/src/index.js","../../europa-plugin-standard-description/src/index.js","../../europa-plugin-standard-details/src/index.js","../../europa-plugin-standard-horizontal-rule/src/index.js","../../europa-plugin-standard-italic/src/index.js","../../europa-plugin-standard-line-break/src/index.js","../../europa-plugin-standard-preformatted/src/index.js","../../europa-plugin-standard-quote/src/index.js","../../europa-utils/src/index.js","../../europa-utils/src/dom.js","../../europa-core/src/Conversion.js","../../europa-core/src/option/Option.js","../../europa-core/src/option/OptionParser.js","../../europa-helpers/src/helpers.js","../../europa-helpers/src/index.js","../../europa-core/src/plugin/PluginAPI.js","../../europa-core/src/plugin/PluginManager.js","../../europa-core/src/service/ServiceManager.js","../../europa-core/src/Europa.js","../../europa-core/src/index.js","../../europa-core/src/service/window/WindowService.js","../src/service/window/BrowserWindowService.js","../src/Europa.js"],"sourcesContent":["/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst contextKey = 'europaPluginStandardAnchor';\n\nmodule.exports = function() {\n  return {\n    converter: {\n      A: {\n        startTag(conversion, context) {\n          const { element, options } = conversion;\n          const href = options.absolute ? element.href : element.getAttribute('href');\n          if (!href) {\n            return true;\n          }\n\n          const { anchorMap, anchors } = conversion.context[contextKey];\n          const title = element.getAttribute('title');\n          const value = title ? `${href} \"${title}\"` : href;\n          let index;\n\n          if (options.inline) {\n            context.value = `(${value})`;\n          } else {\n            index = anchorMap[value];\n            if (index == null) {\n              index = anchors.push(value) - 1;\n\n              anchorMap[value] = index;\n            }\n\n            context.value = `[anchor${index}]`;\n          }\n\n          conversion.output('[');\n\n          conversion.atNoWhiteSpace = true;\n\n          return true;\n        },\n\n        endTag(conversion, context) {\n          if (context.value != null) {\n            conversion.output(`]${context.value}`);\n          }\n        }\n      }\n    },\n\n    startConversion(conversion) {\n      conversion.context[contextKey] = {\n        anchorMap: {},\n        anchors: []\n      };\n    },\n\n    endConversion(conversion) {\n      const { anchors } = conversion.context[contextKey];\n      if (!anchors.length) {\n        return;\n      }\n\n      conversion.append('\\n\\n');\n\n      for (let i = 0; i < anchors.length; i++) {\n        conversion.append(`[anchor${i}]: ${anchors[i]}\\n`);\n      }\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst codeConverter = {\n  startTag(conversion, context) {\n    context.previousInCodeBlock = conversion.inCodeBlock;\n\n    if (conversion.inPreformattedBlock) {\n      context.skipped = true;\n    } else {\n      conversion.output('`');\n\n      conversion.inCodeBlock = true;\n    }\n\n    return true;\n  },\n\n  endTag(conversion, context) {\n    if (!context.skipped) {\n      conversion.inCodeBlock = context.previousInCodeBlock;\n\n      conversion.output('`');\n    }\n  }\n};\n\nmodule.exports = function() {\n  return {\n    converter: {\n      CODE: codeConverter,\n      KBD: codeConverter,\n      SAMP: codeConverter\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst frameConverter = {\n  startTag(conversion, context) {\n    context.previousWindow = conversion.window;\n\n    const window = conversion.element.contentWindow;\n\n    if (window) {\n      conversion.window = window;\n\n      conversion.convertElement(window.document.body);\n    }\n\n    return false;\n  },\n  endTag(conversion, context) {\n    conversion.window = context.previousWindow;\n  }\n};\n\nmodule.exports = function() {\n  return {\n    converter: {\n      FRAME: frameConverter,\n      IFRAME: frameConverter\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst headingConverter = {\n  startTag(conversion, context) {\n    const level = parseInt(conversion.tagName.match(/([1-6])$/)[1], 10);\n\n    conversion.appendParagraph();\n\n    let heading = '';\n    for (let i = 0; i < level; i++) {\n      heading += '#';\n    }\n\n    conversion.output(`${heading} `);\n\n    return true;\n  }\n};\n\nmodule.exports = function() {\n  return {\n    converter: {\n      H1: headingConverter,\n      H2: headingConverter,\n      H3: headingConverter,\n      H4: headingConverter,\n      H5: headingConverter,\n      H6: headingConverter\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst contextKey = 'europaPluginStandardImage';\n\nmodule.exports = function() {\n  return {\n    converter: {\n      IMG: {\n        startTag(conversion, context) {\n          const { element, options } = conversion;\n          const source = options.absolute ? element.src : element.getAttribute('src');\n          if (!source) {\n            return false;\n          }\n\n          const alternativeText = element.getAttribute('alt') || '';\n          const { imageMap, images } = conversion.context[contextKey];\n          const title = element.getAttribute('title');\n          let value = title ? `${source} \"${title}\"` : source;\n          let index;\n\n          if (options.inline) {\n            value = `(${value})`;\n          } else {\n            index = imageMap[value];\n            if (index == null) {\n              index = images.push(value) - 1;\n\n              imageMap[value] = index;\n            }\n\n            value = `[image${index}]`;\n          }\n\n          conversion.output(`![${alternativeText}]${value}`);\n\n          return false;\n        }\n      }\n    },\n\n    startConversion(conversion) {\n      conversion.context[contextKey] = {\n        imageMap: {},\n        images: []\n      };\n    },\n\n    endConversion(conversion) {\n      const { images } = conversion.context[contextKey];\n      if (!images.length) {\n        return;\n      }\n\n      conversion.append('\\n\\n');\n\n      for (let i = 0; i < images.length; i++) {\n        conversion.append(`[image${i}]: ${images[i]}\\n`);\n      }\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nfunction leftPad(string, times, padding) {\n  if (string == null) {\n    string = '';\n  }\n  if (times == null) {\n    times = 0;\n  }\n\n  for (let i = 0; i < times; i++) {\n    string = ` ${string}`;\n  }\n\n  return string;\n}\n\nmodule.exports = function() {\n  return {\n    converter: {\n      LI: {\n        startTag(conversion, context) {\n          const value = conversion.inOrderedList ? `${conversion.listIndex++}. ` : '* ';\n\n          if (!conversion.atLeft) {\n            conversion.append(conversion.left.replace(/[ ]{2,4}$/, '\\n'));\n\n            conversion.atLeft = true;\n            conversion.atNoWhiteSpace = true;\n            conversion.atParagraph = true;\n          } else if (conversion.last) {\n            conversion.last = conversion.last.replace(/[ ]{2,4}$/, '\\n');\n          }\n\n          conversion.append(leftPad(value, (conversion.listDepth - 1) * 2));\n\n          return true;\n        }\n      },\n      OL: {\n        startTag(conversion, context) {\n          context.previousInOrderedList = conversion.inOrderedList;\n          context.previousListIndex = conversion.listIndex;\n\n          if (conversion.listDepth === 0) {\n            conversion.appendParagraph();\n          }\n\n          conversion.inOrderedList = true;\n          conversion.listIndex = 1;\n          conversion.listDepth++;\n\n          return true;\n        },\n\n        endTag(conversion, context) {\n          conversion.inOrderedList = context.previousInOrderedList;\n          conversion.listIndex = context.previousListIndex;\n          conversion.listDepth--;\n        }\n      },\n      UL: {\n        startTag(conversion, context) {\n          context.previousInOrderedList = conversion.inOrderedList;\n          context.previousListIndex = conversion.listIndex;\n\n          if (conversion.listDepth === 0) {\n            conversion.appendParagraph();\n          }\n\n          conversion.inOrderedList = false;\n          conversion.listIndex = 1;\n          conversion.listDepth++;\n\n          return true;\n        },\n\n        endTag(conversion, context) {\n          conversion.inOrderedList = context.previousInOrderedList;\n          conversion.listIndex = context.previousListIndex;\n          conversion.listDepth--;\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst paragraphConverter = {\n  startTag(conversion, context) {\n    conversion.appendParagraph();\n\n    return true;\n  }\n};\n\nmodule.exports = function() {\n  return {\n    converter: {\n      ADDRESS: paragraphConverter,\n      ARTICLE: paragraphConverter,\n      ASIDE: paragraphConverter,\n      DIV: paragraphConverter,\n      FIELDSET: paragraphConverter,\n      FOOTER: paragraphConverter,\n      HEADER: paragraphConverter,\n      NAV: paragraphConverter,\n      P: paragraphConverter,\n      SECTION: paragraphConverter\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nmodule.exports = function(api) {\n  return {\n    converter: {\n      BLOCKQUOTE: api.getHelper('blockQuote')\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nmodule.exports = function(api) {\n  const boldConverter = api.getHelper('bold');\n\n  return {\n    converter: {\n      B: boldConverter,\n      STRONG: boldConverter\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nmodule.exports = function(api) {\n  return {\n    converter: {\n      DD: api.getHelper('blockQuote'),\n\n      DT: {\n        startTag(conversion, context) {\n          conversion.appendParagraph();\n\n          conversion.output('**');\n\n          conversion.atNoWhiteSpace = true;\n\n          return true;\n        },\n\n        endTag(conversion, context) {\n          conversion.output('**');\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nmodule.exports = function() {\n  return {\n    converter: {\n      DETAILS: {\n        startTag(conversion, context) {\n          // TODO: Improve (summary should always be visible, when available, regardless of open state)\n          // TODO: Possible just remove special handling of SUMMARY as well\n          const { element } = conversion;\n\n          conversion.appendParagraph();\n\n          if (element.hasAttribute('open')) {\n            return true;\n          }\n\n          const summary = element.querySelector('summary');\n          conversion.convertElement(summary);\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nmodule.exports = function() {\n  return {\n    converter: {\n      HR: {\n        startTag(conversion, context) {\n          conversion\n            .appendParagraph()\n            .output('---')\n            .appendParagraph();\n\n          return false;\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nmodule.exports = function(api) {\n  const italicConverter = api.getHelper('italic');\n\n  return {\n    converter: {\n      CITE: italicConverter,\n      DFN: italicConverter,\n      EM: italicConverter,\n      I: italicConverter,\n      // TODO: Remove U tag\n      U: italicConverter,\n      VAR: italicConverter\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nmodule.exports = function() {\n  return {\n    converter: {\n      BR: {\n        startTag(conversion, context) {\n          conversion.append(`  ${conversion.left}`);\n\n          conversion.atLeft = true;\n          conversion.atNoWhiteSpace = true;\n\n          return false;\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nmodule.exports = function() {\n  return {\n    converter: {\n      PRE: {\n        startTag(conversion, context) {\n          const value = '    ';\n\n          context.previousInPreformattedBlock = conversion.inPreformattedBlock;\n          context.previousLeft = conversion.left;\n          conversion.left += value;\n\n          if (conversion.atParagraph) {\n            conversion.append(value);\n          } else {\n            conversion.appendParagraph();\n          }\n\n          return true;\n        },\n\n        endTag(conversion, context) {\n          conversion.atLeft = false;\n          conversion.atParagraph = false;\n          conversion.inPreformattedBlock = context.previousInPreformattedBlock;\n          conversion.left = context.previousLeft;\n\n          conversion.appendParagraph();\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nmodule.exports = function() {\n  return {\n    converter: {\n      Q: {\n        startTag(conversion, context) {\n          conversion.output('\"');\n\n          conversion.atNoWhiteSpace = true;\n\n          return true;\n        },\n\n        endTag(conversion, context) {\n          conversion.output('\"');\n        }\n      }\n    }\n  };\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst dom = require('./dom');\n\n/**\n * Iterates over own (not inherited) enumerable properties on the specified <code>object</code>.\n *\n * Nothing happens if <code>object</code> is <code>null</code>.\n *\n * @param {?Object} object - the object whose own properties are to be iterated over\n * @param {europa-utils~ForOwnCallback} callback - the function to be called with the value and key for each own\n * property on <code>object</code>\n * @return {void}\n * @public\n */\nfunction forOwn(object, callback) {\n  if (!object) {\n    return;\n  }\n\n  for (const key in object) {\n    if (hasOwn(object, key)) {\n      callback(object[key], key, object);\n    }\n  }\n}\n\n/**\n * Returns whether the specified <code>object</code> has a property with the specified <code>name</code> as an own\n * (not inherited) property.\n *\n * @param {Object} object - the object on which the property is to be checked\n * @param {string} name - the name of the property to be checked\n * @return {boolean} <code>true</code> if <code>object</code> has an own property with <code>name</code>.\n * @public\n */\nfunction hasOwn(object, name) {\n  return Object.prototype.hasOwnProperty.call(object, name);\n}\n\n/**\n * Returns the names of all own (not inherited) enumerable properties on the specified <code>object</code>.\n *\n * An empty array is returned if <code>object</code> is <code>null</code> or contains no such properties.\n *\n * @param {?Object} object - the object whose keys are to be returned\n * @return {Array.<string>} An array containing all own keys for <code>object</code>.\n * @public\n */\nfunction ownKeys(object) {\n  const keys = [];\n\n  forOwn(object, (value, key) => {\n    keys.push(key);\n  });\n\n  return keys;\n}\n\nmodule.exports = {\n  dom,\n  forOwn,\n  hasOwn,\n  ownKeys\n};\n\n/**\n * Called for each own enumerable property on <code>object</code>.\n *\n * @callback europa-utils~ForOwnCallback\n * @param {*} value - the value of the property\n * @param {string} key - the name of the property\n * @param {Object} object - the object to which the property belongs\n * @return {void}\n */\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * Checks whether the specified <code>element</code> is currently visible using the <code>window</code> provided.\n *\n * This is not a very sophisticated check and could easily be mistaken, but it should catch a lot of the most simple\n * cases.\n *\n * @param {Element} element - the element whose visibility is to be checked\n * @param {Window} window - the window to be used\n * @return {boolean} <code>true</code> if <code>element</code> is visible; otherwise <code>false</code>.\n * @public\n */\nfunction isVisible(element, window) {\n  const style = window.getComputedStyle(element);\n\n  return style.getPropertyValue('display') !== 'none' && style.getPropertyValue('visibility') !== 'hidden';\n}\n\nmodule.exports = {\n  isVisible\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst utils = require('europa-utils');\n\nconst replacements = {\n  '\\\\\\\\': '\\\\\\\\',\n  '\\\\[': '\\\\[',\n  '\\\\]': '\\\\]',\n  '>': '\\\\>',\n  '_': '\\\\_',\n  '\\\\*': '\\\\*',\n  '`': '\\\\`',\n  '#': '\\\\#',\n  '([0-9])\\\\.(\\\\s|$)': '$1\\\\.$2',\n  '\\u00a9': '(c)',\n  '\\u00ae': '(r)',\n  '\\u2122': '(tm)',\n  '\\u00a0': ' ',\n  '\\u00b7': '\\\\*',\n  '\\u2002': ' ',\n  '\\u2003': ' ',\n  '\\u2009': ' ',\n  '\\u2018': '\\'',\n  '\\u2019': '\\'',\n  '\\u201c': '\"',\n  '\\u201d': '\"',\n  '\\u2026': '...',\n  '\\u2013': '--',\n  '\\u2014': '---'\n};\nconst replacementsRegExp = {};\nconst skipTagNames = [\n  'APPLET',\n  'AREA',\n  'AUDIO',\n  'BUTTON',\n  'CANVAS',\n  'DATALIST',\n  'EMBED',\n  'HEAD',\n  'INPUT',\n  'MAP',\n  'MENU',\n  'METER',\n  'NOFRAMES',\n  'NOSCRIPT',\n  'OBJECT',\n  'OPTGROUP',\n  'OPTION',\n  'PARAM',\n  'PROGRESS',\n  'RP',\n  'RT',\n  'RUBY',\n  'SCRIPT',\n  'SELECT',\n  'STYLE',\n  'TEXTAREA',\n  'TITLE',\n  'VIDEO'\n].reduce((acc, value) => {\n  acc[value] = true;\n\n  return acc;\n}, {});\n\nutils.forOwn(replacements, (value, key) => {\n  replacementsRegExp[key] = new RegExp(key, 'g');\n});\n\n/**\n * Contains contextual information for a single conversion process.\n *\n * @param {Europa} europa - the {@link Europa} instance responsible for this conversion\n * @param {Europa~Options} options - the options to be used\n * @param {PluginManager} pluginManager - the {@link PluginManager} to be used\n * @public\n */\nclass Conversion {\n\n  constructor(europa, options, pluginManager) {\n    /**\n     * The {@link Europa} instance responsible for this {@link Conversion}.\n     *\n     * @public\n     * @type {Europa}\n     */\n    this.europa = europa;\n\n    /**\n     * The options for this {@link Conversion}.\n     *\n     * @public\n     * @type {Europa~Options}\n     */\n    this.options = options;\n\n    /**\n     * Whether the buffer is at the start of the current line.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.atLeft = true;\n\n    /**\n     * Whether any white space should be removed from the start of the next output.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.atNoWhiteSpace = true;\n\n    /**\n     * Whether the buffer is at the start of a paragraph.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.atParagraph = true;\n\n    /**\n     * The conversion output buffer to which the Markdown will be written.\n     *\n     * @public\n     * @type {string}\n     */\n    this.buffer = '';\n\n    /**\n     * The context for this {@link Conversion}.\n     *\n     * @public\n     * @type {Object.<string, *>}\n     */\n    this.context = {};\n\n    /**\n     * Whether the buffer is currently within a code block.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.inCodeBlock = false;\n\n    /**\n     * Whether the buffer is currently within an ordered list.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.inOrderedList = false;\n\n    /**\n     * Whether the buffer is currently within a preformatted block.\n     *\n     * @public\n     * @type {boolean}\n     */\n    this.inPreformattedBlock = false;\n\n    /**\n     * The last string to be output next to the buffer.\n     *\n     * @public\n     * @type {string}\n     */\n    this.last = null;\n\n    /**\n     * The start of the current line.\n     *\n     * @public\n     * @type {string}\n     */\n    this.left = '\\n';\n\n    /**\n     * The depth of nested lists.\n     *\n     * @public\n     * @type {number}\n     */\n    this.listDepth = 0;\n\n    /**\n     * The one-based index for the current list item within the current list.\n     *\n     * @public\n     * @type {number}\n     */\n    this.listIndex = 1;\n\n    this._document = europa.document;\n    this._element = null;\n    this._pluginManager = pluginManager;\n    this._tagName = null;\n    this._window = europa.window;\n  }\n\n  /**\n   * Appends the last output string to the buffer and then queues the specified <code>string</code> to be output.\n   *\n   * @param {string} string - the string to be appended\n   * @return {Conversion} A reference to this {@link Conversion} for chaining purposes.\n   * @public\n   */\n  append(string) {\n    if (this.last != null) {\n      this.buffer += this.last;\n    }\n\n    this.last = string;\n\n    return this;\n  }\n\n  /**\n   * Appends a paragraph to the output buffer.\n   *\n   * @return {Conversion} A reference to this {@link Conversion} for chaining purposes.\n   * @public\n   */\n  appendParagraph() {\n    if (this.atParagraph) {\n      return this;\n    }\n\n    if (!this.atLeft) {\n      this.append(this.left);\n\n      this.atLeft = true;\n    }\n\n    this.append(this.left);\n\n    this.atNoWhiteSpace = true;\n    this.atParagraph = true;\n\n    return this;\n  }\n\n  /**\n   * Converts the specified <code>element</code> and it's children into Markdown using this {@link Conversion}.\n   *\n   * Nothing happens if <code>element</code> is <code>null</code> or is invisible (simplified detection used).\n   *\n   * @param {?Element} element - the element (along well as it's children) to be converted into Markdown\n   * @return {void}\n   * @public\n   */\n  convertElement(element) {\n    if (!element) {\n      return;\n    }\n\n    const { _pluginManager: pluginManager, window } = this;\n\n    if (element.nodeType === window.Node.ELEMENT_NODE) {\n      if (!utils.dom.isVisible(element, window)) {\n        return;\n      }\n\n      this.element = element;\n\n      const { tagName } = this;\n\n      if (skipTagNames[tagName]) {\n        return;\n      }\n\n      const context = {};\n      const convertChildren = pluginManager.hasConverter(tagName)\n        ? pluginManager.invokeConverter(tagName, 'startTag', this, context)\n        : true;\n\n      if (convertChildren) {\n        for (let i = 0; i < element.childNodes.length; i++) {\n          this.convertElement(element.childNodes[i]);\n        }\n      }\n\n      pluginManager.invokeConverter(tagName, 'endTag', this, context);\n    } else if (element.nodeType === window.Node.TEXT_NODE) {\n      const value = element.nodeValue || '';\n\n      if (this.inPreformattedBlock) {\n        this.output(value);\n      } else if (this.inCodeBlock) {\n        this.output(value.replace(/`/g, '\\\\`'));\n      } else {\n        this.output(value, true);\n      }\n    }\n  }\n\n  /**\n   * Outputs the specified <code>string</code> to the buffer.\n   *\n   * Optionally, <code>string</code> can be \"cleaned\" before being output. Doing so will replace any certain special\n   * characters as well as some white space.\n   *\n   * @param {string} string - the string to be output\n   * @param {boolean} [clean=false] - <code>true</code> to clean <code>string</code>; otherwise <code>false</code>\n   * @return {Conversion} A reference to this {@link Conversion} for chaining purposes.\n   * @public\n   */\n  output(string, clean) {\n    if (!string) {\n      return this;\n    }\n\n    string = string.replace(/\\r\\n/g, '\\n');\n\n    if (clean) {\n      string = string.replace(/\\n([ \\t]*\\n)+/g, '\\n')\n        .replace(/\\n[ \\t]+/g, '\\n')\n        .replace(/[ \\t]+/g, ' ');\n\n      utils.forOwn(replacements, (value, key) => {\n        string = string.replace(replacementsRegExp[key], value);\n      });\n    }\n\n    if (!this.inPreformattedBlock) {\n      if (this.atNoWhiteSpace) {\n        string = string.replace(/^[ \\t\\n]+/, '');\n      } else if (/^[ \\t]*\\n/.test(string)) {\n        string = string.replace(/^[ \\t\\n]+/, '\\n');\n      } else {\n        string = string.replace(/^[ \\t]+/, ' ');\n      }\n    }\n\n    if (!string) {\n      return this;\n    }\n\n    this.atLeft = /\\n$/.test(string);\n    this.atNoWhiteSpace = /[ \\t\\n]$/.test(string);\n    this.atParagraph = /\\n{2}$/.test(string);\n\n    return this.append(string.replace(/\\n/g, this.left));\n  }\n\n  /**\n   * Replaces the start of the current line with the <code>string</code> provided.\n   *\n   * @param {string} string - the string to replace the start of the current line\n   * @return {Conversion} A reference to this {@link Conversion} for chaining purposes.\n   * @public\n   */\n  replaceLeft(string) {\n    if (!this.atLeft) {\n      this.append(this.left.replace(/[ ]{2,4}$/, string));\n\n      this.atLeft = true;\n      this.atNoWhiteSpace = true;\n      this.atParagraph = true;\n    } else if (this.last) {\n      this.last = this.last.replace(/[ ]{2,4}$/, string);\n    }\n\n    return this;\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return this.append('').buffer.trim();\n  }\n\n  /**\n   * Returns the current document for this {@link Conversion}.\n   *\n   * This may not be the same document as is associated with the {@link Europa} instance as this document may be\n   * nested (e.g. a frame).\n   *\n   * @return {?Document} The current document.\n   * @public\n   */\n  get document() {\n    return this._document;\n  }\n\n  /**\n   * Returns the current element for this {@link Conversion}.\n   *\n   * @return {?Element} The current element.\n   * @public\n   */\n  get element() {\n    return this._element;\n  }\n\n  /**\n   * Sets the current element for this {@link Conversion} to <code>element</code>.\n   *\n   * @param {?Element} element - the current element to be set\n   * @return {void}\n   * @public\n   */\n  set element(element) {\n    this._element = element;\n    this._tagName = element && element.tagName ? element.tagName.toUpperCase() : null;\n  }\n\n  /**\n   * Returns the name of the tag for the current element for this {@link Conversion}.\n   *\n   * The tag name will always be in upper case, when available.\n   *\n   * @return {?string} The current element's tag name.\n   * @public\n   */\n  get tagName() {\n    return this._tagName;\n  }\n\n  /**\n   * Returns the current window for this {@link Conversion}.\n   *\n   * This may not be the same window as is associated with the {@link Europa} instance as this window may be nested\n   * (e.g. a frame).\n   *\n   * @return {?Window} The current window.\n   * @public\n   */\n  get window() {\n    return this._window;\n  }\n\n  /**\n   * Sets the current window for this {@link Conversion} to <code>window</code>.\n   *\n   * This may not be the same window as is associated with the {@link Europa} instance as this window may be nested\n   * (e.g. a frame).\n   *\n   * @param {?Window} window - the window to be set\n   * @return {void}\n   * @public\n   */\n  set window(window) {\n    this._window = window;\n    this._document = window ? window.document : null;\n  }\n\n}\n\nmodule.exports = Conversion;\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * Defines an available option.\n *\n * If <code>defaultValue</code> is a function, it will be called if/when needed and the return value will be used as the\n * default value. If the default value is to be a function itself, then <code>defaultValue</code> must return that\n * function.\n *\n * @param {string} name - the name to be used\n * @param {*} [defaultValue] - the default value to be used\n * @public\n */\nclass Option {\n\n  constructor(name, defaultValue) {\n    /**\n     * The name for this {@link Option}.\n     *\n     * @public\n     * @type {string}\n     */\n    this.name = name;\n\n    this._defaultValue = defaultValue;\n  }\n\n  /**\n   * Returns the default value for this {@link Option}.\n   *\n   * @return {*} The default value.\n   * @public\n   */\n  get defaultValue() {\n    const defaultValue = this._defaultValue;\n\n    return typeof defaultValue === 'function' ? defaultValue.call(this) : defaultValue;\n  }\n\n}\n\nmodule.exports = Option;\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * Manages multiple {@link Option} instances that are intended to be used by multiple implementations/instances.\n *\n * @param {Option[]} options - the options to be used\n * @public\n */\nclass OptionParser {\n\n  constructor(options) {\n    /**\n     * The available options for this {@link OptionParser}.\n     *\n     * @public\n     * @type {Option[]}\n     */\n    this.options = options;\n  }\n\n  /**\n   * Returns whether an option with the specified <code>name</code> is available.\n   *\n   * @param {string} name - the name of the {@link Option} whose existence is to be checked\n   * @return {boolean} <code>true</code> if an {@link Option} exists with <code>name</code>; otherwise\n   * <code>false</code>.\n   * @public\n   */\n  exists(name) {\n    return this.options.some((option) => option.name === name);\n  }\n\n  /**\n   * Parses the specified <code>options</code>, extracting only properties that match valid options and applying default\n   * values where required.\n   *\n   * @param {Object} [options] - the options to be parsed\n   * @return {Object.<string, *>} The parsed options.\n   * @public\n   */\n  parse(options) {\n    if (!options) {\n      options = {};\n    }\n\n    const result = {};\n\n    this.options.forEach((option) => {\n      const { name } = option;\n      const value = options[name] != null ? options[name] : option.defaultValue;\n\n      result[name] = value;\n    });\n\n    return result;\n  }\n\n}\n\nmodule.exports = OptionParser;\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst helpers = {\n  blockQuote() {\n    return {\n      startTag(conversion, context) {\n        const value = '> ';\n\n        context.previousLeft = conversion.left;\n        conversion.left += value;\n\n        if (conversion.atParagraph) {\n          conversion.append(value);\n        } else {\n          conversion.appendParagraph();\n        }\n\n        return true;\n      },\n\n      endTag(conversion, context) {\n        conversion.atLeft = false;\n        conversion.atParagraph = false;\n        conversion.left = context.previousLeft;\n\n        conversion.appendParagraph();\n      }\n    };\n  },\n\n  bold() {\n    return {\n      startTag(conversion, context) {\n        conversion.output('**');\n\n        conversion.atNoWhiteSpace = true;\n\n        return true;\n      },\n\n      endTag(conversion, context) {\n        conversion.output('**');\n      }\n    };\n  },\n\n  italic() {\n    return {\n      startTag(conversion, context) {\n        conversion.output('_');\n\n        conversion.atNoWhiteSpace = true;\n\n        return true;\n      },\n\n      endTag(conversion, context) {\n        conversion.output('_');\n      }\n    };\n  }\n};\n\nmodule.exports = helpers;\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst utils = require('europa-utils');\n\nconst helpers = require('./helpers');\n\n/**\n * Calls the helper with the specified <code>name</code> using the <code>options</code> provided.\n *\n * @param {string} name - the name of the helper to be called\n * @param {Object} [options] - the options to be used\n * @return {*} The result of calling the helper.\n * @throws {ReferenceError} If no helper was found for <code>name</code>.\n * @public\n */\nfunction get(name, options) {\n  const fn = helpers[name];\n  if (!fn) {\n    throw new ReferenceError(`Unknown helper: ${name}`);\n  }\n\n  return fn(options);\n}\n\n/**\n * Returns all of the available helper names.\n *\n * @return {Array.<string>} The helper names.\n * @public\n */\nfunction list() {\n  return utils.ownKeys(helpers);\n}\n\nmodule.exports = {\n  get,\n  list\n};\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst helpers = require('europa-helpers');\n\n/**\n * Contains API methods that passed to plugin providers upon initialization.\n *\n * @public\n */\nclass PluginAPI {\n\n  /**\n * Calls the helper with the specified <code>name</code> using the <code>options</code> provided.\n *\n * @param {string} name - the name of the helper to be called\n * @param {Object} [options] - the options to be used\n * @return {*} The result of calling the helper.\n * @throws {ReferenceError} If no helper was found for <code>name</code>.\n * @public\n */\n  getHelper(name, options) {\n    return helpers.get(name, options);\n  }\n\n}\n\nmodule.exports = PluginAPI;\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst utils = require('europa-utils');\n\nconst PluginAPI = require('./PluginAPI');\n\n/**\n * A basic manager for plugins and presets (collections of plugins) that can be hooked into {@link Europa}.\n *\n * @public\n */\nclass PluginManager {\n\n  constructor() {\n    this._api = new PluginAPI();\n    this._converters = {};\n    this._plugins = [];\n  }\n\n  /**\n   * Invokes the specified plugin <code>provider</code> with a {@link PluginAPI} instance and adds the resulting plugin\n   * to this {@link PluginManager}.\n   *\n   * If the plugin contains any converters, they will associated with their corresponding tag names, overriding any\n   * previously converters associated with those tag names.\n   *\n   * @param {PluginManager~PluginProvider} provider - the provider for the plugin to be added\n   * @return {PluginManager} A reference to this {@link PluginManager} for chaining purposes.\n   * @throws {Error} If a problem occurs while invoking <code>provider</code>.\n   * @public\n   */\n  addPlugin(provider) {\n    const plugin = provider(this._api);\n\n    utils.forOwn(plugin.converter, (converter, tagName) => {\n      if (converter) {\n        this._converters[tagName] = converter;\n      }\n    });\n\n    this._plugins.push(plugin);\n\n    return this;\n  }\n\n  /**\n   * Adds the specified <code>preset</code> to this {@link PluginManager}.\n   *\n   * This method is effectively just a shortcut for calling {@link PluginManager#addPlugin} for multiple plugin\n   * providers, however, the main benefit is that it supports the concept of presets, which are a useful mechanism for\n   * bundling and distributing plugins.\n   *\n   * @param {PluginManager~Preset} preset - the preset whose plugins are to be added\n   * @return {PluginManager} A reference to this {@link PluginManager} for chaining purposes.\n   * @public\n   */\n  addPreset(preset) {\n    const providers = preset.plugins || [];\n\n    providers.forEach((provider) => {\n      this.addPlugin(provider);\n    });\n\n    return this;\n  }\n\n  /**\n   * Returns whether this {@link PluginManager} contains a converter for the specified <code>tagName</code>.\n   *\n   * @param {string} tagName - the name of the tag to be checked\n   * @return {boolean} <code>true</code> if it has a converter for <code>tagName</code>; otherwise <code>false</code>.\n   * @public\n   */\n  hasConverter(tagName) {\n    return utils.hasOwn(this._converters, tagName);\n  }\n\n  /**\n   * Invokes the method with the specified name on with the <code>args</code> provided on the converter for the given\n   * <code>tagName</code> within this {@link PluginManager}.\n   *\n   * This method will return <code>null</code> if there is no converter for <code>tagName</code> or that converter does\n   * not have the method. Otherwise, it will return the result of invoking the method.\n   *\n   * @param {string} tagName - the name of the tag whose converter (if any) the method is to be invoked on\n   * @param {string} methodName - the name of the method to be invoked\n   * @param {...*} [args] - any arguments to be passed to the method\n   * @return {*} The result of calling the method or <code>null</code> if there is no converter for <code>tagName</code>\n   * or it did not have the method.\n   * @public\n   */\n  invokeConverter(tagName, methodName, ...args) {\n    const converter = this._converters[tagName];\n    if (!(converter && typeof converter[methodName] === 'function')) {\n      return null;\n    }\n\n    return converter[methodName](...args);\n  }\n\n  /**\n   * Invokes the method with the specified name with the <code>args</code> provided on each of the plugins within this\n   * {@link PluginManager}.\n   *\n   * Plugins that do not have the method are skipped and any return values are ignored by this method.\n   *\n   * @param {string} methodName - the name of the method to be invoked\n   * @param {...*} [args] - any arguments to be passed to the method\n   * @return {void}\n   * @public\n   */\n  invokePlugins(methodName, ...args) {\n    this._plugins.forEach((plugin) => {\n      if (typeof plugin[methodName] === 'function') {\n        plugin[methodName](...args);\n      }\n    });\n  }\n\n}\n\nmodule.exports = PluginManager;\n\n/**\n * Responsible for converting an individual HTML element to Markdown as defined in a plugin.\n *\n * @public\n * @typedef {Object} PluginManager~Converter\n */\n\n/**\n * Called at the end of the current element within the specified <code>conversion</code> and only once all children\n * elements have been converted as well, provided they weren't skipped.\n *\n * <code>context</code> can be used to receive any state that may been passed at the start of the single element\n * conversion by this converter.\n *\n * This method is optional.\n *\n * @param {Conversion} conversion - the current {@link Conversion}\n * @param {Object.<string, *>} context - the current context for this converter\n * @return {void}\n * @public\n * @abstract\n * @memberof PluginManager~Converter\n * @method endTag\n */\n\n/**\n * Called at the start of the current element within the specified <code>conversion</code> which can be used to provide\n * control over the conversion and returns whether the children of the element should be converted.\n *\n * <code>context</code> can be used to pass any state for a single element conversion from start to end, limited to this\n * converter.\n *\n * This method is optional.\n *\n * @param {Conversion} conversion - the current {@link Conversion}\n * @param {Object.<string, *>} context - the current context for this converter\n * @return {?boolean} <code>true</code> if the children of the current element should be converted; otherwise\n * <code>false</code> or <code>null</code>.\n * @public\n * @abstract\n * @memberof PluginManager~Converter\n * @method startTag\n */\n\n/**\n * A plugin that hooks into the {@link Europa} conversion process.\n *\n * Any declared converters will override any previously associated tag name to converter mappings when the plugin is\n * added to {@link Europa}.\n *\n * @public\n * @typedef {Object} PluginManager~Plugin\n * @property {Object.<string, PluginManager~Converter>} [converter] - A map containing tag name to converter pairs.\n */\n\n/**\n * Called after all elements have been converted for a single input, allowing this plugin to perform any necessary clean\n * up or tear down steps.\n *\n * This method is optional.\n *\n * @param {Conversion} conversion - the current {@link Conversion}\n * @return {void}\n * @public\n * @abstract\n * @memberof PluginManager~Plugin\n * @method endConversion\n */\n\n/**\n * Called before any elements are converted for a single input, allowing this plugin to perform any necessary setup\n * steps.\n *\n * This method is optional.\n *\n * @param {Conversion} conversion - the current {@link Conversion}\n * @return {void}\n * @public\n * @abstract\n * @memberof PluginManager~Plugin\n * @method startConversion\n */\n\n/**\n * A function which returns a plugin compatible with {@link Europa}.\n *\n * The function is invoked internally by {@link PluginManager#addPlugin} in order to get the plugin and is passed an\n * <code>api</code>, which it can choose to use or not.\n *\n * Any error thrown by the function will bubble up and prevent the plugin from being added.\n *\n * @public\n * @callback PluginManager~PluginProvider\n * @param {PluginAPI} api - a {@link PluginAPI} that provides useful methods for plugin providers\n * @return {PluginManager~Plugin} The provided plugin.\n * @throws {Error} If a problem occurs while providing the plugin.\n */\n\n/**\n * A collection of plugins that hook into the {@link Europa} conversion process.\n *\n * @public\n * @typedef {Object} PluginManager~Preset\n * @property {Array.<PluginManager~PluginProvider>} [plugins] - The plugins that belong to this preset.\n */\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\n/**\n * A basic manager for {@link Service} implementations that are mapped to simple names.\n *\n * @public\n */\nclass ServiceManager {\n\n  constructor() {\n    this._services = {};\n  }\n\n  /**\n   * Returns the {@link Service} being managed with the specified <code>name</code>.\n   *\n   * @param {string} name - the name of the {@link Service} to be returned\n   * @return {Service} The {@link Service} is being managed with <code>name</code>.\n   * @throws {Error} If no {@link Service} is being managed with <code>name</code>.\n   * @public\n   */\n  getService(name) {\n    const service = this._services[name];\n    if (!service) {\n      throw new Error(`Service is not being managed with name: ${name}`);\n    }\n\n    return service;\n  }\n\n  /**\n   * Sets the {@link Service} implementation to be managed for the specified <code>name</code> to the\n   * <code>service</code> provided.\n   *\n   * @param {string} name - the name of the {@link Service} to be managed with <code>name</code>\n   * @param {Service} service - the {@link Service} implementation to be managed\n   * @return {void}\n   * @throws {Error} If a {@link Service} is already being managed with the same <code>name</code>.\n   * @public\n   */\n  setService(name, service) {\n    if (this._services[name]) {\n      throw new Error(`Service is already managed with name: ${name}`);\n    }\n\n    if (service) {\n      this._services[name] = service;\n    }\n  }\n\n}\n\nmodule.exports = ServiceManager;\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst Conversion = require('./Conversion');\nconst Option = require('./option/Option');\nconst OptionParser = require('./option/OptionParser');\nconst PluginManager = require('./plugin/PluginManager');\nconst ServiceManager = require('./service/ServiceManager');\n\nconst pluginManager = new PluginManager();\nconst serviceManager = new ServiceManager();\n\n/**\n * Enables configuration of a HTML to Markdown converter that supports HTML strings and DOM elements.\n *\n * @param {Europa~Options} [options] - the options to be used\n * @public\n */\nclass Europa {\n\n  /**\n   * Invokes the specified plugin <code>provider</code> with a {@link PluginAPI} instance and registers the resulting\n   * plugin.\n   *\n   * If the plugin contains any converters, they will associated with their corresponding tag names, overriding any\n   * previously converters associated with those tag names.\n   *\n   * @param {PluginManager~PluginProvider} provider - the provider for the plugin to be registered\n   * @return {void}\n   * @throws {Error} If a problem occurs while invoking <code>provider</code>.\n   * @public\n   */\n  static registerPlugin(provider) {\n    pluginManager.addPlugin(provider);\n  }\n\n  /**\n   * Registers the specified <code>preset</code>.\n   *\n   * This method is effectively just a shortcut for calling {@link Europa.registerPlugin} for multiple plugin providers,\n   * however, the main benefit is that it supports the concept of presets, which are a useful mechanism for bundling and\n   * distributing plugins.\n   *\n   * @param {PluginManager~Preset} preset - the preset whose plugins are to be registered\n   * @return {void}\n   * @public\n   */\n  static registerPreset(preset) {\n    pluginManager.addPreset(preset);\n  }\n\n  /**\n   * Configures the <code>service</code> provided to be used by all {@link Europa} instances.\n   *\n   * @param {Service} service - the {@link Service} to be configured\n   * @return {void}\n   * @throws {Error} If a {@link Service} has already been configured with the same name.\n   * @public\n   */\n  static use(service) {\n    serviceManager.setService(service.getName(), service);\n  }\n\n  constructor(options) {\n    this._options = new OptionParser([\n      new Option('absolute', false),\n      new Option('baseUri', () => serviceManager.getService('window').getDefaultBaseUri()),\n      new Option('inline', false)\n    ]).parse(options);\n    this._window = null;\n  }\n\n  /**\n   * Converts the specified <code>html</code> into Markdown based on the options configured for this {@link Europa}\n   * instance.\n   *\n   * <code>html</code> can either be an HTML string or a DOM element whose HTML contents are to be converted into\n   * Markdown.\n   *\n   * @param {?Element|?string} html - the HTML (or element whose inner HTML is) to be converted into Markdown\n   * @return {string} The Markdown converted from <code>html</code>.\n   * @public\n   */\n  convert(html) {\n    if (!html) {\n      return '';\n    }\n\n    const { document } = this;\n    let root;\n\n    if (typeof html === 'string') {\n      root = document.createElement('div');\n      root.innerHTML = html;\n    } else {\n      root = html;\n    }\n\n    const conversion = new Conversion(this, this._options, pluginManager);\n    let wrapper;\n\n    if (!document.contains(root)) {\n      wrapper = document.createElement('div');\n      wrapper.style.display = 'none';\n      wrapper.appendChild(root);\n\n      document.body.appendChild(wrapper);\n    }\n\n    try {\n      pluginManager.invokePlugins('startConversion', conversion);\n\n      conversion.convertElement(root);\n\n      pluginManager.invokePlugins('endConversion', conversion);\n    } finally {\n      if (wrapper) {\n        document.body.removeChild(wrapper);\n\n        wrapper.removeChild(root);\n      }\n    }\n\n    return conversion.toString();\n  }\n\n  /**\n   * Releases the window used by this {@link Europa} instance.\n   *\n   * This allows closeable {@link WindowService} implementations to close the window and free up resources. However,\n   * this instance can and will simply retrieve another window from the {@link WindowService} the next time it is\n   * required (i.e. {@link Europa#convert} is called).\n   *\n   * @return {Europa} A reference to this {@link Europa} for chaining purposes.\n   * @public\n   */\n  release() {\n    if (this._window) {\n      serviceManager.getService('window').closeWindow(this._window);\n\n      this._window = null;\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns the document to be used for HTML to Markdown conversion by this {@link Europa} instance.\n   *\n   * @return {Document} The document.\n   * @public\n   */\n  get document() {\n    return this.window.document;\n  }\n\n  /**\n   * Returns the window to be used for HTML to Markdown conversion by this {@link Europa} instance.\n   *\n   * @return {Window} The window.\n   * @public\n   */\n  get window() {\n    if (!this._window) {\n      this._window = serviceManager.getService('window').getWindow(this._options.baseUri);\n    }\n\n    return this._window;\n  }\n\n}\n\nmodule.exports = Europa;\n\n/**\n * The options used by {@link Europa}.\n *\n * @typedef {Object} Europa~Options\n * @property {boolean} [absolute=false] - Whether absolute URLS should be used for anchors/images.\n * @property {string} [baseUri] - The base URI for the window. This is ignored in environments where the base URI cannot\n * be changed.\n * @property {boolean} [inline=false] - Whether anchor/image URLs are to be inserted inline.\n */\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst europaPresetStandard = require('europa-preset-standard');\n\nconst Europa = require('./Europa');\n\nEuropa.registerPreset(europaPresetStandard);\n\nmodule.exports = Europa;\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst Service = require('../Service');\n\n/**\n * A service used to retrieve the window object for converting HTML to Markdown and, optionally, to close it upon\n * destruction of the {@link Europa} instance. This can be useful to free up resources as/when required in an artificial\n * browser environment.\n *\n * @public\n */\nclass WindowService extends Service {\n\n  /**\n   * Closes the specified <code>window</code> but only if this {@link WindowService} is closeable.\n   *\n   * @param {Window} window - the window to be closed\n   * @return {void}\n   * @public\n   */\n  closeWindow(window) {\n    if (this.isCloseable(window)) {\n      window.close();\n    }\n  }\n\n  /**\n   * Returns the default base URI for windows provided by this {@link WindowService}.\n   *\n   * Implementations of {@link WindowService} <b>must</b> override this method with their own specific logic.\n   *\n   * @return {string} The default base URI.\n   * @public\n   * @abstract\n   */\n  getDefaultBaseUri() {}\n\n  /**\n   * @override\n   */\n  getName() {\n    return 'window';\n  }\n\n  /**\n   * Returns a window to be used for converting HTML to Markdown using the base URI provided.\n   *\n   * It's important to note that the base URI cannot be changed in some environments, in which case <code>baseUri</code>\n   * will be ignored.\n   *\n   * Implementations of {@link WindowService} <b>must</b> override this method with their own specific logic.\n   *\n   * @param {string} baseUri - the base URI to be used\n   * @return {Window} The window.\n   * @public\n   * @abstract\n   */\n  getWindow(baseUri) {}\n\n  /**\n   * Returns whether the specified <code>window</code> which was retrieved by this {@link WindowService} is closeable.\n   *\n   * The default implementation of this method will always return <code>false</code>.\n   *\n   * @param {Window} window - the window to be checked\n   * @return {boolean} <code>true</code> if <code>window</code> is closeable; otherwise <code>false</code>.\n   * @public\n   */\n  isCloseable(window) {\n    return false;\n  }\n\n}\n\nmodule.exports = WindowService;\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst WindowService = require('europa-core/src/service/window/WindowService');\n\n/**\n * An implementation of {@link WindowService} intended for use within a browser environment.\n *\n * @public\n */\nclass BrowserWindowService extends WindowService {\n\n  /**\n   * @override\n   */\n  getDefaultBaseUri() {\n    return window.document.baseURI;\n  }\n\n  /**\n   * @override\n   */\n  getWindow(baseUri) {\n    return window;\n  }\n\n}\n\nmodule.exports = BrowserWindowService;\n","/*\n * Copyright (C) 2018 Alasdair Mercer, !ninja\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\n'use strict';\n\nconst Europa = require('europa-core');\n\nconst BrowserWindowService = require('./service/window/BrowserWindowService');\n\nEuropa.use(new BrowserWindowService());\n\nmodule.exports = Europa;\n"],"names":["contextKey","codeConverter","conversion","context","previousInCodeBlock","inCodeBlock","inPreformattedBlock","skipped","output","frameConverter","previousWindow","window","element","contentWindow","convertElement","document","body","headingConverter","level","parseInt","tagName","match","appendParagraph","heading","i","paragraphConverter","options","href","absolute","getAttribute","anchorMap","anchors","title","value","index","inline","push","atNoWhiteSpace","length","append","api","getHelper","boldConverter","hasAttribute","summary","querySelector","source","src","alternativeText","imageMap","images","italicConverter","left","atLeft","inOrderedList","listIndex","last","replace","atParagraph","string","times","padding","leftPad","listDepth","previousInOrderedList","previousListIndex","previousInPreformattedBlock","previousLeft","forOwn","object","callback","key","hasOwn","name","Object","prototype","hasOwnProperty","call","style","getComputedStyle","getPropertyValue","keys","replacements","replacementsRegExp","skipTagNames","reduce","acc","utils","RegExp","europa","pluginManager","buffer","_document","_element","_pluginManager","_tagName","_window","this","nodeType","Node","ELEMENT_NODE","dom","isVisible","hasConverter","invokeConverter","childNodes","TEXT_NODE","nodeValue","clean","test","trim","toUpperCase","defaultValue","_defaultValue","some","option","result","forEach","fn","helpers","ReferenceError","ownKeys","get","_api","PluginAPI","_converters","_plugins","provider","plugin","converter","preset","plugins","addPlugin","methodName","args","_services","service","Error","PluginManager","serviceManager","ServiceManager","_options","OptionParser","Option","getService","getDefaultBaseUri","parse","addPreset","setService","getName","html","root","createElement","innerHTML","Conversion","wrapper","contains","display","appendChild","invokePlugins","removeChild","toString","closeWindow","getWindow","baseUri","Europa","registerPreset","europaPresetStandard","Service","isCloseable","close","WindowService","baseURI","use","BrowserWindowService"],"mappings":"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"}