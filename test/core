#!/usr/bin/env coffee

fs     = require 'fs'
md     = require '../lib/md'
path   = require 'path'
{test} = require 'tap'

# Constants
# ---------

ENCODING     = 'utf8'
FIXTURES_DIR = 'fixtures'
HTML_EXT     = '.html'

# Helpers
# -------

loadPackage = ->
  JSON.parse fs.readFileSync path.resolve('../package.json'), ENCODING

testFixture = (t, name) ->
  html     = fs.readFileSync path.join(FIXTURES_DIR, "#{name}.html"), ENCODING
  markdown = fs.readFileSync path.join(FIXTURES_DIR, "#{name}.md"),   ENCODING
  t.test name, (t) ->
    t.equal md(html), markdown, "#{name} fixtures should match"
    t.end()

testFixtures = ->
  test 'fixtures', (t) ->
    files = fs.readdirSync FIXTURES_DIR
    fixtures = (
      for file in files when HTML_EXT is path.extname file
        path.basename file, HTML_EXT
    )
    for fixture in fixtures
      do (fixture) -> testFixture t, fixture
    t.end()

toFileUrl = (relativePath) ->
  "file://#{toPathName relativePath}"

toPathName = (relativePath) ->
  pathName = path.resolve __dirname, '../lib', relativePath
  pathName = pathName.replace ///\\///g, '/'
  pathName = "/#{pathName}" if pathName[0] isnt '/'
  pathName

# Tests
# -----

testFixtures()

test 'options', (t) ->
  t.test 'absolute', (t) ->
    o = absolute: on
    t.equal md('<a href="mock">anchor</a>'), """
      [anchor][0]

      [0]: mock
    """, 'link should be relative'
    t.equal md('<a href="/mock">anchor</a>'), """
      [anchor][0]

      [0]: /mock
    """, 'root link should be relative'
    t.equal md('<a href="mock">anchor</a>', o), """
      [anchor][0]

      [0]: #{toFileUrl 'mock'}
    """, 'link should be absolute'
    t.equal md('<a href="/mock">anchor</a>', o), """
      [anchor][0]

      [0]: #{toFileUrl '/mock'}
    """, 'root link should be absolute'
    t.equal md('<img src="mock">'), '![](mock)', 'image should be relative'
    t.equal md('<img src="mock">', o), '![](mock)', """
      absolute option should not affect images
    """
    t.end()
  t.end()

test 'version', (t) ->
  pkg = loadPackage()
  t.equal md.VERSION, pkg.version, 'version should match descriptor'
  t.end()